<?php
/**
 * SearchRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Xrely\Client
 * @author   xrelyteam
 * @link     https://www.xrely.com
 */

/**
 * XRELY
 *
 * API Documentation for XRELY platform
 *
 * OpenAPI spec version: 1.0.0
 * Contact: contact@xrely.com
 * Generated by: https://www.xrely.com
 * version: 2.4.13-SNAPSHOT
 */

/**
 * Do not edit the class manually.
 */

namespace Xrely\Client\Model;

use \ArrayAccess;
use \Xrely\Client\ObjectSerializer;

/**
 * SearchRequest Class Doc Comment
 *
 * @category Class
 * @package  Xrely\Client
 * @author   xrely team
 * @link     https://www.xrely.com
 */
class SearchRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SearchRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ak' => 'string',
        'q' => 'string',
        'size' => 'Integer',
        'agg_field' => '\Xrely\Client\Model\AggrigationField[]',
        'filter_field' => '\Xrely\Client\Model\FilterField[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ak' => null,
        'q' => null,
        'size' => 0,
        'agg_field' => null,
        'filter_field' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ak' => 'ak',
        'q' => 'q',
        'size' => 'size',
        'agg_field' => 'aggField',
        'filter_field' => 'filterField'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ak' => 'setAk',
        'q' => 'setQ',
        'size' => 'setSize',
        'agg_field' => 'setAggField',
        'filter_field' => 'setFilterField'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ak' => 'getAk',
        'q' => 'getQ',
        'size' => 'getSize',
        'agg_field' => 'getAggField',
        'filter_field' => 'getFilterField'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ak'] = isset($data['ak']) ? $data['ak'] : null;
        $this->container['q'] = isset($data['q']) ? $data['q'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['agg_field'] = isset($data['agg_field']) ? $data['agg_field'] : null;
        $this->container['filter_field'] = isset($data['filter_field']) ? $data['filter_field'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ak
     *
     * @return string
     */
    public function getAk()
    {
        return $this->container['ak'];
    }

    /**
     * Sets ak
     *
     * @param string $ak Account Key
     *
     * @return $this
     */
    public function setAk($ak)
    {
        $this->container['ak'] = $ak;

        return $this;
    }

    /**
     * Gets q
     *
     * @return string
     */
    public function getQ()
    {
        return $this->container['q'];
    }

    /**
     * Sets q
     *
     * @param string $q Query Term
     *
     * @return $this
     */
    public function setQ($q)
    {
        $this->container['q'] = $q;

        return $this;
    }

    /**
     * Gets size
     *
     * @return string
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param string $size Number of results
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets agg_field
     *
     * @return \Xrely\Client\Model\AggrigationField[]
     */
    public function getAggField()
    {
        return $this->container['agg_field'];
    }

    /**
     * Sets agg_field
     *
     * @param \Xrely\Client\Model\AggrigationField[] $agg_field agg_field
     *
     * @return $this
     */
    public function setAggField($agg_field)
    {
        $this->container['agg_field'] = $agg_field;

        return $this;
    }

    /**
     * Gets filter_field
     *
     * @return \Xrely\Client\Model\FilterField[]
     */
    public function getFilterField()
    {
        return $this->container['filter_field'];
    }

    /**
     * Sets filter_field
     *
     * @param \Xrely\Client\Model\FilterField[] $filter_field filter_field
     *
     * @return $this
     */
    public function setFilterField($filter_field)
    {
        $this->container['filter_field'] = $filter_field;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


